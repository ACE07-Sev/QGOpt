{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.4"
    },
    "colab": {
      "name": "channel_tomography.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yCpENKsOeRKt",
        "colab_type": "text"
      },
      "source": [
        "# Quantum channel tomography\n",
        "\n",
        "One can open it in Google Colab (is recommended)\n",
        "\n",
        "[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/LuchnikovI/QGOpt/blob/Dev/docs/source/channel_tomography.ipynb)\n",
        "\n",
        "In the given tutorial, we perform quantum channel tomography via the manifold of Choi matrices. First of all, let us import some libraries."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gdotZMMLeOn6",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import numpy as np\n",
        "from math import sqrt\n",
        "import tensorflow as tf  # tf 2.x\n",
        "\n",
        "try:\n",
        "    import QGOpt as qgo\n",
        "except ImportError:\n",
        "    !pip install git+https://github.com/LuchnikovI/QGOpt\n",
        "    import QGOpt as qgo\n",
        "\n",
        "# TensorNetwork library\n",
        "try:\n",
        "    import tensornetwork as tn\n",
        "except ImportError:\n",
        "    !pip install tensornetwork\n",
        "    import tensornetwork as tn\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "from tqdm import tqdm\n",
        "tn.set_default_backend(\"tensorflow\")\n",
        "\n",
        "# Fix random seed to make results reproducable.\n",
        "tf.random.set_seed(42)"
      ],
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "azpIZCm2d8Ou",
        "colab_type": "text"
      },
      "source": [
        "## Many-qubits, informationally complete, positive operator-valued measure (IC POVM)\n",
        "\n",
        "Before generating measurement outcomes and performing quantum tomography, one needs to introduce POVM describing quantum measurements. For simplicity, we use one-qubit tetrahedral POVM and generalize it on a many-qubit case by taking tensor products between POVM elements, i.e. $\\{M_\\alpha\\}_{\\alpha=1}^4$ is the one-qubit tetrahedral POVM, $\\{M_{\\alpha_1}\\otimes \\dots \\otimes M_{\\alpha_N}\\}_{\\alpha_1=1,\\dots,\\alpha_N=1}^4$ is the many-qubits tetrahedral POVM."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OGPbEyFZd8Ov",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# auxiliary function that returns Kronecker product between POVM elements\n",
        "def kron(A, B):\n",
        "    \"\"\"Kronecker product of two POVM elements.\n",
        "\n",
        "    Args:\n",
        "        A: complex valued tensor of shape (q, n, k).\n",
        "        B: complex valued tensor of shape (p, m, l).\n",
        "\n",
        "    Returns:\n",
        "        complex valued tensor of shape (q * p, n * m, k * l)\"\"\"\n",
        "\n",
        "    AB = tf.tensordot(A, B, axes=0)\n",
        "    AB = tf.transpose(AB, (0, 3, 1, 4, 2, 5))\n",
        "    shape = AB.shape\n",
        "    AB = tf.reshape(AB, (shape[0] * shape[1],\n",
        "                         shape[2] * shape[3],\n",
        "                         shape[4] * shape[5]))\n",
        "    return AB\n",
        "\n",
        "# number of qubits in many-qubits POVMs\n",
        "num_of_qubits = [1, 2]  # number of qubits\n",
        "\n",
        "# Pauli matrices\n",
        "sigma_x = tf.constant([[0, 1], [1, 0]], dtype=tf.complex128)\n",
        "sigma_y = tf.constant([[0 + 0j, -1j], [1j, 0 + 0j]], dtype=tf.complex128)\n",
        "sigma_z = tf.constant([[1, 0], [0, -1]], dtype=tf.complex128)\n",
        "\n",
        "# All Pauli matrices in one tensor of shape (3, 2, 2)\n",
        "sigma = tf.concat([sigma_x[tf.newaxis],\n",
        "                   sigma_y[tf.newaxis],\n",
        "                   sigma_z[tf.newaxis]], axis=0)\n",
        "\n",
        "# coordinates of thetrahedron peaks (is needed to build tetr. POVM)\n",
        "s0 = tf.constant([0, 0, 1], dtype=tf.complex128)\n",
        "s1 = tf.constant([2 * sqrt(2) / 3, 0, -1/3], dtype=tf.complex128)\n",
        "s2 = tf.constant([-sqrt(2) / 3, sqrt(2 / 3), -1 / 3], dtype=tf.complex128)\n",
        "s3 = tf.constant([-sqrt(2) / 3, -sqrt(2 / 3), -1 / 3], dtype=tf.complex128)\n",
        "\n",
        "# coordinates of thetrahedron peaks in one tensor\n",
        "s = tf.concat([s0[tf.newaxis],\n",
        "               s1[tf.newaxis],\n",
        "               s2[tf.newaxis],\n",
        "               s3[tf.newaxis]], axis=0)\n",
        "\n",
        "# One qubit thetrahedral POVM\n",
        "M = 0.25 * (tf.eye(2, dtype=tf.complex128) + tf.tensordot(s, sigma, axes=1))\n",
        "\n",
        "# Many qubits POVMs\n",
        "povms = []\n",
        "for n in num_of_qubits:\n",
        "    Mmq = M\n",
        "    for _ in range(n - 1):\n",
        "        Mmq = kron(Mmq, M)\n",
        "    povms.append(Mmq)"
      ],
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "s9e5LH3rd8Oy",
        "colab_type": "text"
      },
      "source": [
        "## Data set generation (measurement outcomes simulation).\n",
        "\n",
        "Here we generate a set of measurements (training set). First of all, we generate a random quantum channel with Kraus rank  𝑘  by using the Stinespring representation of a quantum channel. Then we generate a set of random pure density matrices pass them trough the generated channel and simulate measurements of output states. Results of measurements and initial states we write in a data set."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jA5UUexod8Oz",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "\n",
        "#================Parameters===================#\n",
        "num_of_meas = 600000  # number of measurements\n",
        "k = 2  # Kraus rank\n",
        "#=============================================#\n",
        "\n",
        "data_sets = {}  # dict will be filled by number_of_qubits: data_set\n",
        "true_choi_matrices = {}  # will be filled by true choi matrices\n",
        "for i, n in enumerate(num_of_qubits):\n",
        "\n",
        "    '''random Kraus set trough Stinespring representation'''\n",
        "    # complex Stiefel manifold\n",
        "    m = qgo.manifolds.StiefelManifold()\n",
        "    # random isometry\n",
        "    V = m.random((k * (2 * n), 2 * n), dtype=tf.complex128)\n",
        "    # reshape to Kraus operators (first index enumerates Kraus operators)\n",
        "    V = tf.reshape(V, (k, 2 ** n, 2 ** n))\n",
        "\n",
        "    # Bell state (is needed to build Choi matric of a channel)\n",
        "    bell_psi = tf.eye(2 ** n, dtype=tf.complex128)\n",
        "    bell_rho = tf.tensordot(bell_psi, tf.math.conj(bell_psi), axes=0)\n",
        "\n",
        "    # Choi matrix of a generated channel \n",
        "    # (will be used to verify results of tomography)\n",
        "    choi_true = tf.einsum('qij,qkl,ajbl->aibk', V, tf.math.conj(V), bell_rho)\n",
        "    choi_true = tf.reshape(choi_true, (2 ** (2 * n), 2 ** (2 * n)))\n",
        "    true_choi_matrices[n] = choi_true\n",
        "\n",
        "    # random initial dens. matrices\n",
        "    psi_set = m.random((num_of_meas, 2 * n), dtype=tf.complex128)\n",
        "    rho_set = psi_set[..., tf.newaxis] * tf.math.conj(psi_set[:, tf.newaxis])\n",
        "\n",
        "    # outpur states\n",
        "    out_rho = tf.einsum('kij,klm,qjm->qil', V, tf.math.conj(V), rho_set)\n",
        "\n",
        "    # Measurements simulation (by using Gumbel trick for sampling from a\n",
        "    # discrete distribution)\n",
        "    P = tf.cast(tf.einsum('qjk,pkj->pq', povms[i], out_rho), dtype=tf.float64)\n",
        "    eps = tf.random.uniform((num_of_meas, 2 ** (2 * n)), dtype=tf.float64)\n",
        "    eps = -tf.math.log(-tf.math.log(eps))\n",
        "    ind_set = tf.math.argmax(eps + tf.math.log(P), axis=-1)\n",
        "\n",
        "    # projectors came true\n",
        "    M_set = tf.gather_nd(povms[i], ind_set[:, tf.newaxis])\n",
        "\n",
        "    data_sets[n] = [rho_set, M_set] # data sets filling"
      ],
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Pvbfxbpqd8O3",
        "colab_type": "text"
      },
      "source": [
        "## Optimization loop\n",
        "\n",
        "Here we perform maximization of logarithmic likelihood. In order to preserve constraints of a quantum channel, we use the manifold of Choi matrices. The manifold of choi matrices is imlemented differently in comparison with other manifolds. Any Choi matrix $\\rho$ is represented by a matrix $A$, where $\\rho = AA^\\dagger$. Since there is an equivalence between $A\\sim AQ$, where $Q$ is an arbitrary unitary matrix, optimization is performed on the quotient manifold eliminating this simmetry. The corresponding quotient geometry is described in\n",
        "\n",
        "Yatawatta, S. (2013, May). Radio interferometric calibration using a Riemannian manifold. In 2013 IEEE International Conference on Acoustics, Speech and Signal Processing (pp. 3866-3870). IEEE."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6MlYR2h7d8O3",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "cbad2f25-f346-49ac-d662-32567f8a665c"
      },
      "source": [
        "# Parameters of learning\n",
        "#=========================================#\n",
        "lr = 0.07  # learning rate\n",
        "num_of_iter = 400  # number of iterations\n",
        "#=========================================#\n",
        "\n",
        "# manifold of Choi matrices\n",
        "m = qgo.manifolds.ChoiMatrix()\n",
        "\n",
        "# dict will be filled by validation curve per data set\n",
        "distances = {}\n",
        "\n",
        "# loop over data sets\n",
        "for n in num_of_qubits:\n",
        "\n",
        "    # initial parametrization\n",
        "    A = m.random((2 ** (2 * n), 2 ** (2 * n)), dtype=tf.complex128)\n",
        "    # real representation of the initial parametrization\n",
        "    A = qgo.manifolds.complex_to_real(A)\n",
        "    # variable to optimize\n",
        "    A = tf.Variable(A)\n",
        "\n",
        "    # optimizer initialization\n",
        "    opt = qgo.optimizers.RAdam(m, lr) # riemannian optimizer\n",
        "\n",
        "    dist = []  # to be filled by distance between Choi matrices vs iteration\n",
        "\n",
        "    # optimization loop\n",
        "    for _ in tqdm(range(num_of_iter)):\n",
        "        with tf.GradientTape() as tape:\n",
        "            # complex representation of parametrization\n",
        "            A_c = qgo.manifolds.real_to_complex(A)\n",
        "            A_c = tf.reshape(A_c, (2 ** n, 2 ** n, 2 ** (2 * n)))\n",
        "            # choi matrix and its preprocessing\n",
        "            choi = tf.tensordot(A_c, tf.math.conj(A_c), [[2], [2]])\n",
        "            current_choi = tf.reshape(choi, (2 ** (2 * n), 2 ** (2 * n)))\n",
        "            choi = tf.transpose(choi, (1, 3, 0, 2))\n",
        "            choi = tf.reshape(choi, (2 ** (2 * n), 2 ** (2 * n)))\n",
        "            # some preprocessing of input density matrices\n",
        "            rho_set_resh = tf.reshape(data_sets[n][0], (-1, 2 ** (2 * n)))\n",
        "            # quantum channel application\n",
        "            rho_out_resh = tf.tensordot(choi, rho_set_resh, [[1], [1]])\n",
        "            rho_out_resh = tf.transpose(rho_out_resh)\n",
        "            rho_out = tf.reshape(rho_out_resh, (-1, 2 ** n, 2 ** n))\n",
        "            # probabilities of measurements outcomes\n",
        "            p = tf.abs(tf.linalg.trace(data_sets[n][1] @ rho_out))\n",
        "            # mean negative log likelihood (to be optimized)\n",
        "            loss = -tf.reduce_mean(tf.math.log(p))\n",
        "        grad = tape.gradient(loss, A)  # gradient\n",
        "        opt.apply_gradients(zip([grad], [A]))  # optimization step\n",
        "        # append current value distance between the true Choi matrix and\n",
        "        # the reconstructed Choi matrix to the list of distances\n",
        "        dist.append(tf.reduce_sum(tf.abs(tf.linalg.eigvalsh(current_choi -\\\n",
        "                                    true_choi_matrices[n]))) / (2 * (2 ** n)))\n",
        "    distances[n] = dist  # filling dict with validation curves"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "100%|██████████| 400/400 [06:10<00:00,  1.08it/s]\n",
            "100%|██████████| 400/400 [06:14<00:00,  1.07it/s]\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KCToEbFhd8O7",
        "colab_type": "text"
      },
      "source": [
        "## Validation curves\n",
        "\n",
        "Here we plot validation curves. $d$ is the dimension of Hilbert space."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xbkSQUK6d8O8",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 298
        },
        "outputId": "b8bf9bbc-18bd-469e-ed83-cd31306ec469"
      },
      "source": [
        "for n in num_of_qubits:\n",
        "    plt.plot(distances[n])\n",
        "plt.legend([r'$n=$' + str(n) + r'$\\ qubits$' for n in num_of_qubits])\n",
        "plt.yscale('log')\n",
        "plt.ylabel(r'$\\frac{1}{2d}\\|\\rho_{\\rm true} - \\rho_{\\rm recon}\\|_{\\rm tr}$')\n",
        "plt.xlabel(r'$iter$')"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 0, '$iter$')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 35
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}